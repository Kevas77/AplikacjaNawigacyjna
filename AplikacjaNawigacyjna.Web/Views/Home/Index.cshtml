@model ViewModel

@{
    ViewData["Title"] = "Mapa i lokalizacja";

}

<div class="row">
    <div class="col-md-8">
        <div style="height: 600px;" id="map"></div>
    </div>
    <div class="col-md-4">
        <h4>Wyznacz trasę</h4>
        <form id="routeForm">
            <div class="mb-3">
                <label for="startPoint" class="form-label">Punkt początkowy</label>
                <select class="form-select" id="startPoint" required>
                    <option value="">Wybierz...</option>
                    @foreach (var loc in Model.locations)
                    {
                        <option value="@loc.Latitude,@loc.Longitude">@loc.Name</option>
                    }
                </select>
            </div>
            <div class="mb-3">
                <label for="endPoint" class="form-label">Punkt końcowy</label>
                <select class="form-select" id="endPoint" required>
                    <option value="">Wybierz...</option>
                    @foreach (var loc in Model.locations)
                    {
                        <option value="@loc.Latitude,@loc.Longitude">@loc.Name</option>
                    }
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Wyznacz trasę</button>
        </form>
        <div id="routeInfo" class="mt-3"></div>
    </div>
</div>

<!-- Leaflet CSS -->
<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet/dist/leaflet.css"
/>


<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script>

    const redIcon = L.icon({
          iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
          shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
          iconSize: [25, 41],
          iconAnchor: [12, 41],
          popupAnchor: [1, -34],
          shadowSize: [41, 41]
      });

        const orangeIcon = L.icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

  // Inicjalizacja mapy
  var map = L.map('map').locate({ setView: true, maxZoom: 16 });

  // Warstwa OSM
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; OpenStreetMap contributors'
  }).addTo(map);

     function getBoundsAndLoadEvents() {
          const bounds = map.getBounds();
          const minLat = bounds.getSouth();
          const maxLat = bounds.getNorth();
          const minLon = bounds.getWest();
          const maxLon = bounds.getEast();

          fetch(`/Home/GetTrafficEvents?minLat=${minLat}&maxLat=${maxLat}&minLon=${minLon}&maxLon=${maxLon}`)
              fetch('/Home/GetTrafficEvents', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    MinLat: minLat,
                      MaxLat: maxLat,
                          MinLon: minLon,
                              MaxLon: maxLon
                })
            })
              .then(response => response.json())
              .then(data => {
                  data.forEach(event => {
                        const marker = L.marker([event.location.latitude, event.location.longitude], { icon: redIcon }).addTo(map);
                        marker.bindPopup(`<strong>Zdarzenie drogowe</strong>`);
                  });
              });
      }
      function getBoundsAndLoadPOIs() {
        const bounds = map.getBounds();
        const minLat = bounds.getSouth();
        const maxLat = bounds.getNorth();
        const minLon = bounds.getWest();
        const maxLon = bounds.getEast();

        fetch(`/Home/GetPOIs?minLat=${minLat}&maxLat=${maxLat}&minLon=${minLon}&maxLon=${maxLon}`)
                fetch('/Home/GetPOIs', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                      MinLat: minLat,
                        MaxLat: maxLat,
                            MinLon: minLon,
                                MaxLon: maxLon
                  })
              })
                .then(response => response.json())
                .then(data => {
                    data.forEach(poi => {
                          const marker = L.marker([poi.point.lat, poi.point.lon], { icon: orangeIcon }).addTo(map);
                            marker.bindPopup(`<strong>${poi.name}</strong>` + '<dd>' + poi.kinds + '</dd>');
                    });
                });
        }

  // Dodaj markery dla Model.locations
  @foreach (var loc in Model.locations)
  {
            <text>
            L.marker([@Html.Raw(Json.Serialize(loc.Latitude)), @Html.Raw(Json.Serialize(loc.Longitude))])
              .addTo(map)
              .bindPopup(`
                  <b>@loc.Name</b><br/>
                  <button type="button" onclick="editMapPoint('@loc.Code', '@loc.Name')">Edytuj</button>
                  <button type="button" onclick="deleteMapPoint('@loc.Code')">Usuń</button>
              `);
          </text>
  }

       map.on('click', function(e) {
              const lat = e.latlng.lat;
              const lng = e.latlng.lng;

              const popupContent = `
                  <strong>Dodaj lokalizację</strong><br/>
                  <input type="text" id="locationName" placeholder="Nazwa" /><br/>
                  <button type="button" onclick="submitLocation(${lat}, ${lng})">Zapisz</button>
              `;

              L.popup()
                  .setLatLng(e.latlng)
                  .setContent(popupContent)
                  .openOn(map);
          });

              function submitLocation(lat, lng) {
        const name = document.getElementById('locationName').value;

        const latitude = lat.toString().replace('.', ',');
        const longitude = lng.toString().replace('.', ',');

        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/Home/AddMapPoint';

        const codeInput = document.createElement('input');
        codeInput.type = 'hidden';
        codeInput.name = 'Code';
        codeInput.value = 'code';
        form.appendChild(codeInput);


        const nameInput = document.createElement('input');
        nameInput.type = 'hidden';
        nameInput.name = 'Name';
        nameInput.value = name;
        form.appendChild(nameInput);

        const latInput = document.createElement('input');
        latInput.type = 'hidden';
        latInput.name = 'Latitude';
        latInput.value = latitude;
        form.appendChild(latInput);

        const lngInput = document.createElement('input');
        lngInput.type = 'hidden';
        lngInput.name = 'Longitude';
        lngInput.value = longitude;
        form.appendChild(lngInput);

        document.body.appendChild(form);
        form.submit();


    }
            function deleteMapPoint(code) {
        if (confirm('Czy na pewno chcesz usunąć ten punkt?')) {
            fetch(`/Home/DeleteMapPoint?code=${encodeURIComponent(code)}`, {
                method: 'DELETE'
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Błąd podczas usuwania punktu.');
                }
            });
        }
    }

        function editMapPoint(code, name) {
        // Tworzymy formularz edycji
        const popupContent = `
            <strong>Edytuj nazwę lokalizacji</strong><br/>
            <input type="text" id="editLocationName" value="${name}" /><br/>
            <button type="button" onclick="submitEditMapPoint('${code}')">Zapisz</button>
        `;

        // Znajdź marker o podanej nazwie i otwórz popup w tym miejscu
        // (lub po prostu otwórz popup w centrum mapy)
        L.popup()
            .setLatLng(map.getCenter())
            .setContent(popupContent)
            .openOn(map);
    }

    function submitEditMapPoint(code) {
        const newName = document.getElementById('editLocationName').value;

        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/Home/EditMapPoint';

        const codeInput = document.createElement('input');
        codeInput.type = 'hidden';
        codeInput.name = 'code';
        codeInput.value = code;
        form.appendChild(codeInput);

        const newNameInput = document.createElement('input');
        newNameInput.type = 'hidden';
        newNameInput.name = 'NewName';
        newNameInput.value = newName;
        form.appendChild(newNameInput);

        document.body.appendChild(form);
        form.submit();
    }        

      let routeLayer = null;

      document.getElementById('routeForm').addEventListener('submit', function (e) {
          e.preventDefault();
          const startSelect = document.getElementById('startPoint');
          const endSelect = document.getElementById('endPoint');
          const start = startSelect.value.split(',');
          const end = endSelect.value.split(',');
          const startName = startSelect.options[startSelect.selectedIndex].text;
          const endName = endSelect.options[endSelect.selectedIndex].text;

          let startLat = start[0] + "." + start[1];
          let endLat = end[0] + "." + end[1];
          let startLng = start[2] + "." + start[3];
          let endLng = end[2] + "." + end[3];

          fetch('/Home/CalculateRoute', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                  Origin: { Latitude: parseFloat(startLat), Longitude: parseFloat(startLng) },
                  Destination: { Latitude: parseFloat(endLat), Longitude: parseFloat(endLng) },
                  StartName: startName,
                  EndName: endName
              })
          })
          .then(res => res.json())
          .then(data => {
              if (routeLayer) {
                  map.removeLayer(routeLayer);
              }
              if (data.path && data.path.length > 0) {
                  const latlngs = data.path.map(p => [p.latitude, p.longitude]);
                  routeLayer = L.polyline(latlngs, { color: 'blue' }).addTo(map);
                  map.fitBounds(routeLayer.getBounds());
                  document.getElementById('routeInfo').innerText = `Dystans: ${(data.distanceInMeters / 1000).toFixed(2)} km`;
              } else {
                  document.getElementById('routeInfo').innerText = 'Nie znaleziono trasy.';
              }
          });
      });

        map.on('moveend', getBoundsAndLoadPOIs);
        map.on('moveend', getBoundsAndLoadEvents);
        getBoundsAndLoadPOIs()
        getBoundsAndLoadEvents();
</script>